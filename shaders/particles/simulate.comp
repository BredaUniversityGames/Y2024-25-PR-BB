#version 460
#include "particle_binds.glsl"

layout (set = 2, binding = 0) buffer CulledInstancesSSB
{
    CulledInstances culledInstances;
};

layout (push_constant) uniform DeltaTime
{
    float deltaTime;
};

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main()
{
    uint index = gl_GlobalInvocationID.x;
    uint aliveCount = particleCounters.aliveCount;
    if (index >= aliveCount)
    {
        return;
    }

    uint particleIndex = aliveBufferCURRENT[index];
    Particle particle = particles[particleIndex];

    particle.life -= deltaTime;

    if (particle.life > 0)
    {
        // simulate particles
        particle.velocity.y -= particle.mass * deltaTime;
        particle.position += particle.velocity * deltaTime;

        // TODO: kill particle on depth collision and break

        // simulate angle
        particle.rotationVelocity.x += particle.rotationVelocity.y * deltaTime;

        // write simulated particle back into particle buffer
        particles[particleIndex] = particle;

        // add to new alive list:
        uint newAliveIndex = atomicAdd(particleCounters.aliveCountAfterSimulation, 1);
        aliveBufferNEW[newAliveIndex] = particleIndex;

        // TODO: frustum culling

        // for now add all to culled list:
        uint culledIndex = atomicAdd(culledInstances.count, 1);
        ParticleInstance instance;
        instance.position = particle.position;
        instance.materialIndex = particle.materialIndex;
        instance.size = particle.size;
        instance.angle = particle.rotationVelocity.x;
        culledInstances.instances[culledIndex] = instance;
    }
    else // if dead
    {
        // add to dead buffer
        uint deadIndex = atomicAdd(particleCounters.deadCount, 1);
        deadBuffer[deadIndex] = particleIndex;
    }
}
