#version 460

#include "scene.glsl"

struct DrawCommand
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
};

layout (std430, set = 0, binding = 0) readonly buffer DrawCommandsIn
{
    DrawCommand drawCommandsIn[];
};

layout (std430, set = 1, binding = 0) buffer DrawCommandsOut
{
    DrawCommand drawCommandsOut[];
};

layout (std430, set = 2, binding = 0) buffer InstanceData
{
    Instance instances[];
};

layout (set = 3, binding = 0) uniform CameraUBO
{
    Camera camera;
};

layout (local_size_x = 64) in;

bool IsVisible(uint objectIndex);

void main()
{
    uint gId = gl_GlobalInvocationID.x;

    if (gId < drawCommandsIn.length())
    {
        drawCommandsOut[gId] = drawCommandsIn[gId];
        if (!IsVisible(gId))
        {
            drawCommandsOut[gId].instanceCount = 0;
        }
    }
}

bool IsVisible(uint objectIndex)
{
    // Grab position from world matrix and convert it into view space.
    vec3 center = instances[objectIndex].model[3].xyz;
    center = (camera.view * vec4(center, 1.f)).xyz;

    // Applies the scale of the instance to obtain world bounding radus. Perhaps a place to optmize later.
    vec4 r = vec4(instances[objectIndex].boundingRadius, 0.0f, 0.0f, 0.0f);
    r *= instances[objectIndex].model;
    float radius = length(r);

    bool visible = true;

    // Test against frustum.
    if (camera.projectionType == 0)
    {
        visible = visible && center.z * camera.frustum[1] - abs(center.x) * camera.frustum[0] > -radius;
        visible = visible && center.z * camera.frustum[3] - abs(center.y) * camera.frustum[2] > -radius;
    }
    else if (camera.projectionType == 1)
    {
        visible = visible && center.x + radius > camera.frustum[0]; // Left plane
        visible = visible && center.x - radius < camera.frustum[1]; // Right plane
        visible = visible && center.y + radius > camera.frustum[2]; // Bottom plane
        visible = visible && center.y - radius < camera.frustum[3]; // Top plane
    }

    if (camera.distanceCullingEnabled != 0)
    {
        // Test against near and far plane.
        visible = visible && -center.z + radius > camera.zNear && -center.z - radius < camera.zFar;
    }

    visible = visible && camera.cullingEnabled != 0;

    return visible;
}
