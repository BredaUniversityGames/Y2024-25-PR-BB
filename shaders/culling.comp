#version 460

struct DrawCall
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
};

// TODO: Add culling

layout (std430, binding = 0, set = 0) buffer DrawCalls
{
    DrawCall drawCalls[];
};

layout (local_size_x = 64) in;

bool IsVisible(uint objectIndex);

void main()
{
    uint gId = gl_GlobalInvocationID.x;

    if (gId < drawCalls.length())
    {
        drawCalls[gId].instanceCount = 0;
    }
}

bool IsVisible(uint objectIndex)
{
/*
    //grab sphere cull data from the object buffer
    vec4 sphereBounds = objectBuffer.objects[objectIndex].spherebounds;

    vec3 center = sphereBounds.xyz;
    center = (cullData.view * vec4(center, 1.f)).xyz;
    float radius = sphereBounds.w;

    bool visible = true;

    //frustrum culling
    visible = visible && center.z * cullData.frustum[1] - abs(center.x) * cullData.frustum[0] > -radius;
    visible = visible && center.z * cullData.frustum[3] - abs(center.y) * cullData.frustum[2] > -radius;

    if (cullData.distCull != 0)
    {
        // the near/far plane culling uses camera space Z directly
        visible = visible && center.z + radius > cullData.znear && center.z - radius < cullData.zfar;
    }

    visible = visible || cullData.cullingEnabled == 0;

    return visible;
    */
    return true;
}
