#version 460
#extension GL_EXT_nonuniform_qualifier: enable

#include "bindless.glsl"
#include "scene.glsl"
#include "octahedron.glsl"

layout (push_constant) uniform PushConstants
{
    uint albedoRMIndex;
    uint depthIndex;
    uvec2 screenSize;
    float decalNormalThreshold;
} pushConstants;

layout (set = 1, binding = 0) uniform CameraUBO
{
    Camera camera;
};

layout (set = 2, binding = 0) uniform DecalUBO
{
    Decal decals[MAX_DECALS];
};

// TODO: see if I can dedicate one of these to looping over decals?
layout (local_size_x = 12, local_size_y = 12, local_size_z = 1) in;

void main()
{
    uint index = gl_GlobalInvocationID.x;

    //vec4 albedoRMSample = texture(bindless_color_textures[nonuniformEXT(pushConstants.albedoRMIndex)], texCoords);
    //float depthSample = texture(bindless_depth_textures[nonuniformEXT(pushConstants.depthIndex)], texCoords).r;

    //vec3 albedo = albedoRMSample.rgb;
    //vec3 position = ReconstructWorldPosition(depthSample, texCoords, camera.inverseVP);

    // Decal calculations
    //    for (uint decalIndex = 0; decalIndex < decals.count; decalIndex++)
    //    {
    //        Decal currentDecal = decals.decals[decalIndex];
    //
    //        // transform pixel pos to decal box space
    //        vec4 positionObjectSpace = currentDecal.invModel * vec4(position, 1.0f);
    //
    //        // check if pixel is within decal box
    //        if (abs(positionObjectSpace.x) - 0.5f <= 0.0f &&
    //        abs(positionObjectSpace.y) - 0.5f <= 0.0f &&
    //        abs(positionObjectSpace.z) - 0.5f <= 0.0f)
    //        {
    //            // make sure there's no side stretching
    //            if (dot(normalize(normal), currentDecal.orientation) - pushConstants.decalNormalThreshold > 0.0f)
    //            {
    //                vec2 decalTexCoord = positionObjectSpace.xy + 0.5f;
    //                vec4 decalAlbedo = texture(bindless_color_textures[nonuniformEXT(currentDecal.albedoIndex)], decalTexCoord);
    //                float decalBlend = decalAlbedo.w;
    //                albedo = mix(albedo, decalAlbedo.xyz, decalBlend);
    //            }
    //        }
    //    }
}
